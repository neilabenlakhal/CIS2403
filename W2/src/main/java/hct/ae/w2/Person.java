/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package hct.ae.w2;

/**
 * Every line of code that runs in Java must be inside a class. In our example,
 * we named the class Person. A class should always start with an uppercase
 * first letter.
 *
 * Note: Java is case-sensitive: "Person" and "person" has different meaning.
 * The name of the java file must match the class name. When saving the file,
 * save it using the class name and add ".java" to the end of the filename
 *
 * A method is a block of code which only runs when it is called.
 *
 * You can pass data, known as parameters, into a method. Methods are used to
 * perform certain actions, and they are also known as functions. Why use
 * methods? To reuse code: define the code once, and use it many times.
 *
 *
 * @author nlakhal
 */
public class Person {

    // Attributes
    private String name;        // Private to control access from outside the class
    private int age;            // Private to control access from outside the class
    private String idNumber;    // Private to control access from outside the class

    // Default Constructor
    //special method, has the same name as the class.
    //A default constructor is a constructor that is automatically generated by the compiler if no other constructor is explicitly defined in a class
    // 
    public Person() {
        // Default with no specific values. May be will get the values later. Not needed initially

        //another way : 
        //  public Person() {
        // Default values can be set here
        //  this.name = "Unknown";
        //   this.age = 0;
        //   this.idNumber = "Not yet assigned";
    }

    // Parameterized Constructor
    public Person(String name, int age, String idNumber) {
        this.name = name;
        this.age = age;
        this.idNumber = idNumber;
    }

    // Getter methods
    public String getName() {
        return name;  // Accessible outside the class through a public method
    }

    public int getAge() {
        return age;  // Accessible outside the class through a public method
    }

    public String getIdNumber() {
        return idNumber;  // Accessible outside the class through a public method
    }

    // Setter methods (optional)
    public void setName(String name) {
        this.name = name;  // Accessible outside the class through a public method
    }

    public void setAge(int age) {
        this.age = age;  // Accessible outside the class through a public method
    }

    public void setIdNumber(String idNumber) {
        this.idNumber = idNumber;  // Accessible outside the class through a public method
    }

    // toString method for easy printing
    @Override
    public String toString() {
        return "\nPerson Details\n=========\nID: "
                + this.getIdNumber() + "\nName: " + this.getName();
    }
}
